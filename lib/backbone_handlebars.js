// Generated by CoffeeScript 1.3.1
(function() {
  var findViewClass, _compile, _remove;

  Handlebars.registerHelper('view', function(name, options) {
    var parentView, view, viewClass;
    viewClass = findViewClass(name);
    view = new viewClass(options.hash);
    if (options.fn != null) {
      view.template = options.fn;
    }
    parentView = options.data.view;
    if (parentView._toRender == null) {
      parentView._toRender = [];
    }
    parentView._toRender.push(view);
    return new Handlebars.SafeString('<div id="_' + view.cid + '"></div>');
  });

  findViewClass = function(name) {
    var viewClass;
    viewClass = _.inject((name || '').split('.'), (function(memo, fragment) {
      return memo[fragment] || false;
    }), window);
    if (!viewClass) {
      throw "Invalid view name - " + name;
    }
    return viewClass;
  };

  Backbone.View.prototype.renderTemplate = function(context) {
    var _this = this;
    if (context == null) {
      context = {};
    }
    if (this.renderedChildren) {
      _.invoke(this.renderedChildren, 'remove');
    }
    this.$el.html(this.template(context, {
      data: {
        view: this
      }
    }));
    this.renderedChildren = _.map(this._toRender, function(view) {
      view.render();
      _this.$("#_" + view.cid).replaceWith(view.el);
      return view;
    });
    return delete this._toRender;
  };

  _remove = Backbone.View.prototype.remove;

  Backbone.View.prototype.remove = function() {
    if (this.renderedChildren) {
      _.invoke(this.renderedChildren, 'remove');
    }
    return _remove.apply(this, arguments);
  };

  _compile = Handlebars.compile;

  Handlebars.compile = function(template, options) {
    if (options == null) {
      options = {};
    }
    options.data = true;
    return _compile.call(this, template, options);
  };

}).call(this);
