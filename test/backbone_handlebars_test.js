// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.SubView = (function(_super) {

    __extends(SubView, _super);

    SubView.name = 'SubView';

    function SubView() {
      return SubView.__super__.constructor.apply(this, arguments);
    }

    SubView.prototype.className = 'sub-view';

    return SubView;

  })(Backbone.View);

  describe("Backbone.Handlebars", function() {
    return describe("view helper", function() {
      var TestView;
      TestView = (function(_super) {

        __extends(TestView, _super);

        TestView.name = 'TestView';

        function TestView() {
          return TestView.__super__.constructor.apply(this, arguments);
        }

        TestView.prototype.template = Handlebars.compile('{{view "SubView"}}', {
          data: true
        });

        TestView.prototype.render = function() {
          return this.renderTemplate();
        };

        return TestView;

      })(Backbone.View);
      it("adds the sub-view element", function() {
        var view;
        view = new TestView;
        view.render();
        return view.$('.sub-view').should.not.be["null"];
      });
      it("keeps the events of the sub-view", function() {
        var view;
        window.SubView.prototype.events = {
          click: function() {
            return this.$el.html('clicked');
          }
        };
        view = new TestView;
        view.render();
        view.$('.sub-view').click();
        return view.$('.sub-view').html().should.eql('clicked');
      });
      it("can render several sub-views", function() {
        var DoubleTestView, view;
        DoubleTestView = (function(_super) {

          __extends(DoubleTestView, _super);

          DoubleTestView.name = 'DoubleTestView';

          function DoubleTestView() {
            return DoubleTestView.__super__.constructor.apply(this, arguments);
          }

          DoubleTestView.prototype.template = Handlebars.compile('{{view "SubView"}}{{view "SubView"}}', {
            data: true
          });

          return DoubleTestView;

        })(TestView);
        view = new DoubleTestView;
        view.render();
        return view.$('.sub-view').length.should.eql(2);
      });
      it("searches through nested sub-view names");
      it("can pass options to the sub-view");
      return it("can pass a new template for the view");
    });
  });

}).call(this);
