// Generated by CoffeeScript 1.3.1
(function() {

  window.test = {
    views: {
      SubView: Backbone.View.extend({
        className: 'sub-view'
      }),
      SubViewWithEvents: Backbone.View.extend({
        className: 'sub-view',
        events: {
          click: function() {
            return this.$el.html('clicked');
          }
        }
      }),
      SubViewExpectingTemplate: Backbone.View.extend({
        className: 'sub-view',
        template: Handlebars.compile('text'),
        render: function() {
          return this.$el.html(this.template({}));
        }
      }),
      SubViewWithModel: Backbone.View.extend({
        className: 'sub-view',
        render: function() {
          return this.$el.html(this.model);
        }
      })
    }
  };

  describe("Backbone.Handlebars", function() {
    return describe("view helper", function() {
      var renderView;
      renderView = function(template) {
        var customViewClass;
        customViewClass = Backbone.View.extend({
          template: Handlebars.compile(template, {
            data: true
          }),
          initialize: function() {
            return this.renderTemplate();
          }
        });
        return new customViewClass;
      };
      it("renders sub-view element", function() {
        var view;
        view = renderView('{{view "test.views.SubView"}}');
        return view.$('.sub-view').should.not.be["null"];
      });
      it("keeps the events of the sub-view", function() {
        var subViewEl, view;
        view = renderView('{{view "test.views.SubViewWithEvents"}}');
        subViewEl = view.$('.sub-view');
        subViewEl.click();
        return subViewEl.html().should.eql('clicked');
      });
      it("can render several sub-views", function() {
        var view;
        view = renderView('{{view "test.views.SubView"}}{{view "test.views.SubView"}}');
        return view.$('.sub-view').length.should.eql(2);
      });
      it("throws an error if sub-view doesn't exists", function() {
        return (function() {
          return renderView('{{view "InvalidView"}}');
        }).should["throw"]('Invalid view name - InvalidView');
      });
      it("can pass options to the sub-view", function() {
        var subViewEl, view;
        view = renderView('{{view "test.views.SubViewWithModel" model=1 tagName="span" className="sview"}}');
        subViewEl = view.$('.sview');
        subViewEl.html().should.eql('1');
        return subViewEl.prop('tagName').toLowerCase().should.eql('span');
      });
      return it("can pass a new template for the view", function() {
        var view;
        view = renderView('{{#view "test.views.SubViewExpectingTemplate"}}custom template{{/view}} ');
        return view.$('.sub-view').html().should.eql('custom template');
      });
    });
  });

}).call(this);
