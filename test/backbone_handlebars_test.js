// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.SubView = (function(_super) {

    __extends(SubView, _super);

    SubView.name = 'SubView';

    function SubView() {
      return SubView.__super__.constructor.apply(this, arguments);
    }

    SubView.prototype.className = 'sub-view';

    SubView.prototype.events = {
      click: function() {
        return this.$el.html('clicked');
      }
    };

    return SubView;

  })(Backbone.View);

  window.SubViewExpectingTemplate = (function(_super) {

    __extends(SubViewExpectingTemplate, _super);

    SubViewExpectingTemplate.name = 'SubViewExpectingTemplate';

    function SubViewExpectingTemplate() {
      return SubViewExpectingTemplate.__super__.constructor.apply(this, arguments);
    }

    SubViewExpectingTemplate.prototype.className = 'sub-view';

    SubViewExpectingTemplate.prototype.template = Handlebars.compile('text');

    SubViewExpectingTemplate.prototype.render = function() {
      return this.$el.html(this.template({}));
    };

    return SubViewExpectingTemplate;

  })(Backbone.View);

  window.SubViewWithModel = (function(_super) {

    __extends(SubViewWithModel, _super);

    SubViewWithModel.name = 'SubViewWithModel';

    function SubViewWithModel() {
      return SubViewWithModel.__super__.constructor.apply(this, arguments);
    }

    SubViewWithModel.prototype.render = function() {
      return this.$el.html(this.model);
    };

    return SubViewWithModel;

  })(Backbone.View);

  window.app = {
    views: {
      SubView: Backbone.View.extend({
        render: function() {
          return this.$el.html('sub-view');
        }
      })
    }
  };

  describe("Backbone.Handlebars", function() {
    return describe("view helper", function() {
      var renderView;
      renderView = function(template) {
        var customViewClass;
        customViewClass = Backbone.View.extend({
          template: Handlebars.compile(template, {
            data: true
          }),
          initialize: function() {
            return this.renderTemplate();
          }
        });
        return new customViewClass;
      };
      it("adds the sub-view element", function() {
        var view;
        view = renderView('{{view "SubView"}}');
        return view.$('.sub-view').should.not.be["null"];
      });
      it("keeps the events of the sub-view", function() {
        var view;
        view = renderView('{{view "SubView"}}');
        view.$('.sub-view').click();
        return view.$('.sub-view').html().should.eql('clicked');
      });
      it("can render several sub-views", function() {
        var view;
        view = renderView('{{view "SubView"}}{{view "SubView"}}');
        view.render();
        return view.$('.sub-view').length.should.eql(2);
      });
      it("throws an error if sub-view doesn't exists", function() {
        return (function() {
          return renderView('{{view "InvalidView"}}');
        }).should["throw"]('Invalid view name - InvalidView');
      });
      it("searches through nested sub-view names", function() {
        var view;
        view = renderView('{{view "app.views.SubView"}}');
        return view.$el.html().should.eql('<div>sub-view</div>');
      });
      it("can pass options to the sub-view", function() {
        var subView, view;
        view = renderView('{{view "SubViewWithModel" model=1 tagName="span" className="sview"}}');
        subView = view.$('.sview');
        subView.html().should.eql('1');
        return subView.prop('tagName').toLowerCase().should.eql('span');
      });
      return it("can pass a new template for the view", function() {
        var view;
        view = renderView('{{#view "SubViewExpectingTemplate"}}custom template{{/view}} ');
        return view.$('.sub-view').html().should.eql('custom template');
      });
    });
  });

}).call(this);
